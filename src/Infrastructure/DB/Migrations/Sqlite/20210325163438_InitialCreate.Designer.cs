// <auto-generated />
using System;
using ECommerceSample.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ECommerceSample.Infrastructure.DB.Migrations.Sqlite
{
    [DbContext(typeof(SqliteECommerceDbContext))]
    [Migration("20210325163438_InitialCreate")]
    partial class InitialCreate
    {
#pragma warning disable CS1591 // 公開されている型またはメンバーの XML コメントがありません
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
#pragma warning restore CS1591 // 公開されている型またはメンバーの XML コメントがありません
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminAccounts.AdminAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AdminAccounts");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminAccounts.AdminAccountRole", b =>
                {
                    b.Property<int>("AdminAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdminAccountId", "AdminRoleId");

                    b.HasIndex("AdminRoleId");

                    b.ToTable("AdminAccountRoles");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminPermissions.AdminPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("AdminPermissions");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminRoles.AdminRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("AdminRoles");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminRoles.AdminRolePermission", b =>
                {
                    b.Property<int>("AdminRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminPermissionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdminRoleId", "AdminPermissionId");

                    b.HasIndex("AdminPermissionId");

                    b.ToTable("AdminRolePermissions");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminAccounts.AdminAccountRole", b =>
                {
                    b.HasOne("ECommerceSample.Infrastructure.DB.Tables.AdminAccounts.AdminAccount", "AdminAccount")
                        .WithMany("AdminAccountRoles")
                        .HasForeignKey("AdminAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceSample.Infrastructure.DB.Tables.AdminRoles.AdminRole", "AdminRole")
                        .WithMany("AdminAccountRoles")
                        .HasForeignKey("AdminRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminAccount");

                    b.Navigation("AdminRole");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminRoles.AdminRolePermission", b =>
                {
                    b.HasOne("ECommerceSample.Infrastructure.DB.Tables.AdminPermissions.AdminPermission", "AdminPermission")
                        .WithMany("AdminRolePermissions")
                        .HasForeignKey("AdminPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceSample.Infrastructure.DB.Tables.AdminRoles.AdminRole", "AdminRole")
                        .WithMany("AdminRolePermissions")
                        .HasForeignKey("AdminRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminPermission");

                    b.Navigation("AdminRole");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminAccounts.AdminAccount", b =>
                {
                    b.Navigation("AdminAccountRoles");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminPermissions.AdminPermission", b =>
                {
                    b.Navigation("AdminRolePermissions");
                });

            modelBuilder.Entity("ECommerceSample.Infrastructure.DB.Tables.AdminRoles.AdminRole", b =>
                {
                    b.Navigation("AdminAccountRoles");

                    b.Navigation("AdminRolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
